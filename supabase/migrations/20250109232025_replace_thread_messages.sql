-- Drop existing policies
drop policy if exists "Allow users to read thread messages for their channels" on public.thread_messages;
drop policy if exists "Allow users to create thread replies" on public.thread_messages;
drop policy if exists "Allow users to update their thread replies" on public.thread_messages;
drop policy if exists "Allow users to delete their thread replies" on public.thread_messages;

-- Drop the helper function
drop function if exists public.get_thread_messages;

-- Now we can drop the table
drop table if exists public.thread_messages;

-- Create message type enum
create type public.message_type as enum ('channel', 'direct', 'thread');

-- Create the new thread_messages table
create table public.thread_messages (
  id            bigint generated by default as identity primary key,
  inserted_at   timestamp with time zone default timezone('utc'::text, now()) not null,
  message       text,
  user_id       uuid references public.users not null,
  parent_id     bigint not null,
  parent_type   message_type not null
);
comment on table public.thread_messages is 'Thread replies for both channel messages and direct messages';

-- Create trigger function to validate parent reference
create or replace function public.validate_thread_message_parent()
returns trigger as $$
begin
  if new.parent_type = 'channel' then
    if not exists (select 1 from public.messages where id = new.parent_id) then
      raise exception 'Invalid channel message parent reference';
    end if;
  elsif new.parent_type = 'direct' then
    if not exists (select 1 from public.direct_messages where id = new.parent_id) then
      raise exception 'Invalid direct message parent reference';
    end if;
  end if;
  return new;
end;
$$ language plpgsql security definer;

-- Create trigger
create trigger validate_thread_message_parent_trigger
  before insert or update on public.thread_messages
  for each row execute function public.validate_thread_message_parent();

-- Enable RLS
alter table public.thread_messages enable row level security;

-- Thread Messages policies
create policy "Allow users to read thread messages" on public.thread_messages
  for select using (
    -- For channel messages
    (parent_type = 'channel' and exists (
      select 1 from public.messages m
      where m.id = thread_messages.parent_id
      and exists (
        select 1 from public.channels c
        where c.id = m.channel_id
        and auth.role() = 'authenticated'
      )
    ))
    -- For direct messages
    or (parent_type = 'direct' and exists (
      select 1 from public.direct_messages dm
      where dm.id = thread_messages.parent_id
      and (auth.uid() = dm.sender_id or auth.uid() = dm.receiver_id)
    ))
  );

create policy "Allow users to create thread replies" on public.thread_messages
  for insert with check (
    auth.uid() = user_id
  );

create policy "Allow users to update their thread replies" on public.thread_messages
  for update using (
    auth.uid() = user_id
  );

create policy "Allow users to delete their thread replies" on public.thread_messages
  for delete using (
    auth.uid() = user_id
  );

-- Add to realtime subscription
alter publication supabase_realtime add table public.thread_messages;

-- Enable full replica identity for realtime events
alter table public.thread_messages replica identity full;

-- Helper function for thread operations
create or replace function public.get_thread_messages(
  p_parent_id bigint,
  p_parent_type message_type
) returns setof public.thread_messages as $$
begin
  return query
  select * from public.thread_messages
  where parent_id = p_parent_id
    and parent_type = p_parent_type
  order by inserted_at;
end;
$$ language plpgsql security definer;