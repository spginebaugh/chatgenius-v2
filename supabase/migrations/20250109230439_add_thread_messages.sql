-- Add threads support to both messages and direct_messages
create table public.thread_messages (
  id            bigint generated by default as identity primary key,
  inserted_at   timestamp with time zone default timezone('utc'::text, now()) not null,
  message       text,
  user_id       uuid references public.users not null,
  -- References to parent messages - only one should be set
  parent_message_id      bigint references public.messages,
  parent_direct_message_id bigint references public.direct_messages,
  -- Constraint to ensure only one parent is set
  constraint single_parent_message check (
    (parent_message_id is null and parent_direct_message_id is not null) 
    or (parent_message_id is not null and parent_direct_message_id is null)
  )
);
comment on table public.thread_messages is 'Thread replies for both channel messages and direct messages';

-- Enable RLS
alter table public.thread_messages enable row level security;

-- Thread Messages policies
create policy "Allow users to read thread messages for their channels" on public.thread_messages
  for select using (
    -- For channel messages
    (parent_message_id is not null and exists (
      select 1 from public.messages m
      where m.id = thread_messages.parent_message_id
      and exists (
        select 1 from public.channels c
        where c.id = m.channel_id
        and auth.role() = 'authenticated'
      )
    ))
    -- For direct messages
    or (parent_direct_message_id is not null and exists (
      select 1 from public.direct_messages dm
      where dm.id = thread_messages.parent_direct_message_id
      and (auth.uid() = dm.sender_id or auth.uid() = dm.receiver_id)
    ))
  );

create policy "Allow users to create thread replies" on public.thread_messages
  for insert with check (
    auth.uid() = user_id
  );

create policy "Allow users to update their thread replies" on public.thread_messages
  for update using (
    auth.uid() = user_id
  );

create policy "Allow users to delete their thread replies" on public.thread_messages
  for delete using (
    auth.uid() = user_id
  );

-- Add to realtime subscription
alter publication supabase_realtime add table public.thread_messages;

-- Enable full replica identity for realtime events
alter table public.thread_messages replica identity full;

-- Helper function for thread operations
create or replace function public.get_thread_messages(
  p_message_id bigint,
  p_is_direct_message boolean default false
) returns setof public.thread_messages as $$
begin
  if p_is_direct_message then
    return query
    select * from public.thread_messages
    where parent_direct_message_id = p_message_id
    order by inserted_at;
  else
    return query
    select * from public.thread_messages
    where parent_message_id = p_message_id
    order by inserted_at;
  end if;
end;
$$ language plpgsql security definer;