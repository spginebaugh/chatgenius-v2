-- Create enums (referenced from init.sql lines 3-5)
create type public.app_permission as enum ('channels.delete', 'messages.delete');
create type public.app_role as enum ('admin', 'moderator');
create type public.user_status as enum ('ONLINE', 'OFFLINE');
create type public.message_parent_type as enum ('channel_message', 'direct_message', 'thread_message');
create type public.file_type as enum ('image', 'video', 'audio', 'document');

-- Create base tables
create table public.users (
  id uuid not null primary key,
  username text,
  bio text,
  profile_picture_url text,
  last_active_at timestamp with time zone default timezone('utc'::text, now()),
  status user_status default 'OFFLINE'::public.user_status,
  inserted_at timestamp with time zone default timezone('utc'::text, now()) not null
);
comment on table public.users is 'Profile data for each user.';
comment on column public.users.id is 'References the internal Supabase Auth user.';
comment on column public.users.bio is 'User''s bio/about text.';
comment on column public.users.profile_picture_url is 'URL to user''s profile picture.';
comment on column public.users.last_active_at is 'Timestamp of user''s last activity.';

create table public.channels (
  channel_id bigint generated by default as identity primary key,
  slug text unique not null,
  created_by uuid references public.users not null,
  inserted_at timestamp with time zone default timezone('utc'::text, now()) not null
);
comment on table public.channels is 'Topics and groups.';

create table public.channel_messages (
  message_id bigint generated by default as identity primary key,
  message text,
  channel_id bigint references public.channels on delete cascade not null,
  user_id uuid references public.users not null,
  inserted_at timestamp with time zone default timezone('utc'::text, now()) not null
);
comment on table public.channel_messages is 'Messages sent in channels.';

-- Direct Messages
create table public.direct_messages (
  message_id bigint generated by default as identity primary key,
  message text,
  sender_id uuid references public.users not null,
  receiver_id uuid references public.users not null,
  inserted_at timestamp with time zone default timezone('utc'::text, now()) not null
);
comment on table public.direct_messages is 'Private messages between users.';

-- Thread Messages
create table public.thread_messages (
  message_id bigint generated by default as identity primary key,
  message text,
  user_id uuid references public.users not null,
  parent_id bigint not null,
  parent_type message_parent_type not null,
  inserted_at timestamp with time zone default timezone('utc'::text, now()) not null,
  constraint valid_thread_parent_types check (parent_type in ('channel_message', 'direct_message'))
);
comment on table public.thread_messages is 'Thread replies for both channel messages and direct messages.';

-- Emoji Reactions
create table public.emoji_reactions (
  reaction_id bigint generated by default as identity primary key,
  user_id uuid references public.users not null,
  parent_id bigint not null,
  parent_type message_parent_type not null,
  emoji text not null,
  inserted_at timestamp with time zone default timezone('utc'::text, now()) not null
);
comment on table public.emoji_reactions is 'Emoji reactions for messages.';

-- Files
create table public.files (
  file_id bigint generated by default as identity primary key,
  user_id uuid references public.users not null,
  parent_id bigint not null,
  parent_type message_parent_type not null,
  file_type file_type not null,
  file_url text not null,
  inserted_at timestamp with time zone default timezone('utc'::text, now()) not null
);
comment on table public.files is 'Files attached to messages.';

-- Message Mentions
create table public.message_mentions (
  mention_id bigint generated by default as identity primary key,
  parent_id bigint not null,
  parent_type message_parent_type not null,
  mentioned_user_id uuid references public.users not null,
  inserted_at timestamp with time zone default timezone('utc'::text, now()) not null
);
comment on table public.message_mentions is 'User mentions in messages.';

-- Add indexes for RLS performance
create index thread_messages_user_id_idx on public.thread_messages using btree (user_id);
create index emoji_reactions_user_id_idx on public.emoji_reactions using btree (user_id);
create index files_user_id_idx on public.files using btree (user_id);
create index channel_messages_user_id_idx on public.channel_messages using btree (user_id);
create index direct_messages_sender_id_idx on public.direct_messages using btree (sender_id);
create index direct_messages_receiver_id_idx on public.direct_messages using btree (receiver_id);

-- Roles and Permissions
create table public.user_roles (
  role_assignment_id bigint generated by default as identity primary key,
  user_id uuid references public.users not null,
  role app_role not null,
  inserted_at timestamp with time zone default timezone('utc'::text, now()) not null,
  unique (user_id, role)
);
comment on table public.user_roles is 'User role assignments.';

create table public.role_permissions (
  permission_assignment_id bigint generated by default as identity primary key,
  role app_role not null,
  permission app_permission not null,
  inserted_at timestamp with time zone default timezone('utc'::text, now()) not null,
  unique (role, permission)
);
comment on table public.role_permissions is 'Role permission assignments.';

-- Helper Functions
create or replace function public.authorize(
  required_permission app_permission,
  user_id uuid
)
returns boolean
language sql
security definer
set search_path = public
as $$
  select exists (
    select 1
    from user_roles ur
    join role_permissions rp on ur.role = rp.role
    where ur.user_id = authorize.user_id
    and rp.permission = authorize.required_permission
  );
$$;

-- Handle new user registration
create function public.handle_new_user()
returns trigger
language plpgsql
security definer
set search_path = public
as $$
begin
  insert into public.users (id, username)
  values (new.id, new.email);

  -- First user gets admin role
  if (select count(*) = 1 from auth.users) then
    insert into public.user_roles (user_id, role)
    values (new.id, 'admin');
  end if;

  -- Handle special email addresses
  if position('+supaadmin@' in new.email) > 0 then
    insert into public.user_roles (user_id, role)
    values (new.id, 'admin');
  elsif position('+supamod@' in new.email) > 0 then
    insert into public.user_roles (user_id, role)
    values (new.id, 'moderator');
  end if;

  return new;
end;
$$;

-- Trigger for new user registration
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();

-- Validation Functions
create function public.validate_thread_message_parent()
returns trigger
language plpgsql
security definer
as $$
begin
  if new.parent_type = 'channel_message' then
    if not exists (select 1 from public.channel_messages where message_id = new.parent_id) then
      raise exception 'Invalid channel message parent reference';
    end if;
  elsif new.parent_type = 'direct_message' then
    if not exists (select 1 from public.direct_messages where message_id = new.parent_id) then
      raise exception 'Invalid direct message parent reference';
    end if;
  end if;
  return new;
end;
$$;

create function public.validate_message_parent()
returns trigger
language plpgsql
security definer
as $$
begin
  if new.parent_type = 'channel_message' then
    if not exists (select 1 from public.channel_messages where message_id = new.parent_id) then
      raise exception 'Invalid channel message parent reference';
    end if;
  elsif new.parent_type = 'direct_message' then
    if not exists (select 1 from public.direct_messages where message_id = new.parent_id) then
      raise exception 'Invalid direct message parent reference';
    end if;
  elsif new.parent_type = 'thread_message' then
    if not exists (select 1 from public.thread_messages where message_id = new.parent_id) then
      raise exception 'Invalid thread message parent reference';
    end if;
  end if;
  return new;
end;
$$;

-- Helper function for thread operations
create or replace function public.get_thread_messages(
  p_parent_id bigint,
  p_parent_type message_parent_type
) returns setof public.thread_messages as $$
begin
  return query
  select * from public.thread_messages
  where parent_id = p_parent_id
    and parent_type = p_parent_type
  order by inserted_at;
end;
$$ language plpgsql security definer;

create or replace function public.create_user(
    email text
) returns uuid
    security definer
    set search_path = auth
as $$
declare
  user_id uuid;
begin
  user_id := extensions.uuid_generate_v4();
  
  insert into auth.users (id, email)
    values (user_id, email)
    returning id into user_id;

    return user_id;
end;
$$ language plpgsql;

-- Validation Triggers
create trigger validate_thread_message_parent_trigger
  before insert or update on public.thread_messages
  for each row execute function public.validate_thread_message_parent();

create trigger validate_emoji_reaction_parent
  before insert or update on public.emoji_reactions
  for each row execute function public.validate_message_parent();

create trigger validate_file_parent
  before insert or update on public.files
  for each row execute function public.validate_message_parent();

create trigger validate_mention_parent
  before insert or update on public.message_mentions
  for each row execute function public.validate_message_parent();

-- Enable RLS on all tables
alter table public.users enable row level security;
alter table public.channels enable row level security;
alter table public.channel_messages enable row level security;
alter table public.direct_messages enable row level security;
alter table public.thread_messages enable row level security;
alter table public.emoji_reactions enable row level security;
alter table public.files enable row level security;
alter table public.message_mentions enable row level security;
alter table public.user_roles enable row level security;
alter table public.role_permissions enable row level security;

-- User policies (referenced from init.sql lines 89-94)
create policy "Allow logged-in read access" on public.users
  for select using (auth.role() = 'authenticated');
create policy "Allow individual insert access" on public.users
  for insert with check (auth.uid() = id);
create policy "Allow individual update access" on public.users
  for update using (auth.uid() = id);

-- Channel policies (referenced from init.sql lines 95-102)
create policy "Allow logged-in read access" on public.channels
  for select using (auth.role() = 'authenticated');
create policy "Allow individual insert access" on public.channels
  for insert with check (auth.uid() = created_by);
create policy "Allow individual delete access" on public.channels
  for delete using (auth.uid() = created_by);
create policy "Allow authorized delete access" on public.channels
  for delete using (authorize('channels.delete', auth.uid()));

-- Channel messages policies (referenced from init.sql lines 103-112)
create policy "Allow logged-in read access" on public.channel_messages
  for select using (auth.role() = 'authenticated');
create policy "Allow individual insert access" on public.channel_messages
  for insert with check (auth.uid() = user_id);
create policy "Allow individual update access" on public.channel_messages
  for update using (auth.uid() = user_id);
create policy "Allow individual delete access" on public.channel_messages
  for delete using (auth.uid() = user_id);
create policy "Allow authorized delete access" on public.channel_messages
  for delete using (authorize('messages.delete', auth.uid()));

-- Direct messages policies (referenced from add_direct_messages.sql lines 15-37)
create policy "Allow users to read their conversations" on public.direct_messages 
  for select using (auth.uid() = sender_id or auth.uid() = receiver_id);
create policy "Allow users to send messages" on public.direct_messages
  for insert with check (auth.uid() = sender_id);
create policy "Allow users to update their messages" on public.direct_messages
  for update using (auth.uid() = sender_id);
create policy "Allow users to delete their messages" on public.direct_messages
  for delete using (auth.uid() = sender_id);

-- Thread messages policies (referenced from replace_thread_messages.sql lines 53-86)
create policy "Allow users to read thread messages" on public.thread_messages
  for select using (
    (parent_type = 'channel_message' and exists (
      select 1 from public.channel_messages m
      where m.message_id = thread_messages.parent_id
      and auth.role() = 'authenticated'
    ))
    or (parent_type = 'direct_message' and exists (
      select 1 from public.direct_messages dm
      where dm.message_id = thread_messages.parent_id
      and (auth.uid() = dm.sender_id or auth.uid() = dm.receiver_id)
    ))
  );
create policy "Allow users to create thread replies" on public.thread_messages
  for insert with check (auth.uid() = user_id);
create policy "Allow users to update their thread replies" on public.thread_messages
  for update using (auth.uid() = user_id);
create policy "Allow users to delete their thread replies" on public.thread_messages
  for delete using (auth.uid() = user_id);

-- Emoji reactions policies (referenced from add_reactions_files_profiles.sql lines 66-73)
create policy "Allow users to read emoji reactions" on public.emoji_reactions
  for select using (auth.role() = 'authenticated');
create policy "Allow users to add emoji reactions" on public.emoji_reactions
  for insert with check (auth.uid() = user_id);
create policy "Allow users to remove their emoji reactions" on public.emoji_reactions
  for delete using (auth.uid() = user_id);

-- Files policies (referenced from add_reactions_files_profiles.sql lines 76-83)
create policy "Allow users to read files" on public.files
  for select using (auth.role() = 'authenticated');
create policy "Allow users to upload files" on public.files
  for insert with check (auth.uid() = user_id);
create policy "Allow users to delete their files" on public.files
  for delete using (auth.uid() = user_id);

-- Message mentions policies (referenced from add_reactions_files_profiles.sql lines 96-97)
create policy "Allow users to read message mentions" on public.message_mentions
  for select using (auth.role() = 'authenticated');

-- Setup realtime (referenced from init.sql lines 156-168)
begin;
  drop publication if exists supabase_realtime;
  create publication supabase_realtime;
commit;

-- Add tables to realtime
alter publication supabase_realtime add table public.users;
alter publication supabase_realtime add table public.channels;
alter publication supabase_realtime add table public.channel_messages;
alter publication supabase_realtime add table public.direct_messages;
alter publication supabase_realtime add table public.thread_messages;
alter publication supabase_realtime add table public.emoji_reactions;
alter publication supabase_realtime add table public.files;
alter publication supabase_realtime add table public.message_mentions;

-- Enable full replica identity for realtime
alter table public.users replica identity full;
alter table public.channels replica identity full;
alter table public.channel_messages replica identity full;
alter table public.direct_messages replica identity full;
alter table public.thread_messages replica identity full;
alter table public.emoji_reactions replica identity full;
alter table public.files replica identity full;
alter table public.message_mentions replica identity full;